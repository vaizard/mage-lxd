---

# renaming outer loop items
- set_fact:
  args:
    c_name: "{{ item.name }}"
    tmp_proxy: "{{ item.proxy | default([]) }}"
    tmp_devices: "{{ item.devices | default([]) }}"
    tmp_proxies: {} # needed here so that we start with a clean tmp_proxies on every inner loop

# converting the proxy list into devices-style dict
- set_fact:
    tmp_proxies: "{{ tmp_proxies|default({}) | combine( {inner_item.name: { 'listen': inner_item.proto + ':' + lxd_init_https_addr + ':' + inner_item.dst|string, 'connect': inner_item.proto + ':127.0.0.1:' + inner_item.nxt|string, 'bind': 'host', 'type': 'proxy' } }, recursive=True ) }}"
  with_items: "{{ tmp_proxy }}"
  loop_control:
    loop_var: inner_item

# merging together proxy devices with other devices
- set_fact:
    devices: "{{ tmp_devices | combine(tmp_proxies) }}"

- name: "Making sure lxd containers are present (create and start otherwise)"
  lxd_container:
    name: "{{ item.name }}"
    state: started
    source:
      type: image
      mode: pull
      server: "{{ item.server | default(lxd_container_server) }}"
      protocol: "{{ item.protocol | default(lxd_container_protocol) }}"
      alias: "{{ item.image | default(lxd_container_alias) }}"
    url: 'unix:/var/snap/lxd/common/lxd/unix.socket'
    profiles: ["default"]
    devices: "{{ devices }}"
    config: "{{ item.config | default({}) }}"
    wait_for_ipv4_addresses: true
    timeout: 360

- name: "Ensure we can use the lxd connector on newly created containers"
  local_action: add_host name="{{ item.name }}" ansible_connection=lxd ansible_become=false
#  when: (item.name is defined and item.name|trim)

- name: "Get container OS"
  shell: "/snap/bin/lxc exec {{ item.name }} -- cat /etc/os-release | grep '^ID=' | cut -c4- | sed -e 's/^\"//' -e 's/\"$//'"
  register: os

#- debug: var=os

- shell: "/snap/bin/lxc exec {{ item.name }} -- apt-get install -y python3"
  when: os.stdout == 'ubuntu'
  ignore_errors: yes

- shell: "/snap/bin/lxc exec {{ item.name }} -- dnf install -y python3 python3-simplejson python3-dnf libselinux-python3"
  when: (os.stdout == 'fedora') or (os.stdout == 'centos') or (os.stdout == 'rhel') or (os.stdout == 'ol')
  ignore_errors: yes

- shell: "/snap/bin/lxc exec {{ item.name }} -- emerge -u python gentoolkit"
  when: os.stdout == 'gentoo'
  ignore_errors: yes

- name: "Update the inventory"
  become: yes
  lineinfile: path="{{ inventory_file }}" regexp="^{{ item.name }} ansible_connection=lxd ansible_host={{ inventory_hostname | replace('127.0.0.1','local') | replace('localhost','local') }}:{{ item.name }}" insertafter="^\[lxd\]" line="{{ item.name }} ansible_connection=lxd ansible_host={{ inventory_hostname | replace('127.0.0.1','local') | replace('localhost','local') }}:{{ item.name }}"
  delegate_to: localhost

